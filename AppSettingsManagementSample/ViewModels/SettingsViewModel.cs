using AppSettingsManagement;
using AppSettingsManagementSample.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.ApplicationModel.Activation;

namespace AppSettingsManagementSample.ViewModels;

// TODO: autogenerate MVVM bindings
/// <summary>
/// Autogenerated
/// </summary>
internal partial class SettingsViewModel : SettingsViewModelBase
{
    private SettingsService SettingsService => (SettingsService)base.SettingsContainer;

    // Initialize view model and register events for updating view model when settings are changed.
    protected override void InitializeSettings()
    {
        Username = SettingsService.ActiveAccount.Username;
        var username_Handler = new SettingChangedEventHandler((_, _) => { Username = SettingsService.ActiveAccount.Username; });
        settingChangedEventHandlers.Add(username_Handler);
        SettingsService.ActiveAccount.UsernameChanged += username_Handler;

        Password = SettingsService.ActiveAccount.Password;
        var password_Handler = new SettingChangedEventHandler((_, _) => { Password = SettingsService.ActiveAccount.Password; });
        settingChangedEventHandlers.Add(password_Handler);
        SettingsService.ActiveAccount.PasswordChanged += password_Handler;

        TestNames = SettingsService.Names;
    }
    // TODO: use weak reference for events to avoid memory leak
    protected override void RemoveSettingsChagnedHandlers()
    {
        var settingsService = (SettingsService)SettingsContainer;

        SettingsService.ActiveAccount.UsernameChanged -= settingChangedEventHandlers[0];
        SettingsService.ActiveAccount.PasswordChanged -= settingChangedEventHandlers[1];
    }

    protected override void OnPropertyChanged(PropertyChangedEventArgs e)
    {
        base.OnPropertyChanged(e);

        if (e.PropertyName == nameof(Username))
            SettingsService.ActiveAccount.Username = Username!;
        else if (e.PropertyName == nameof(Password))
            SettingsService.ActiveAccount.Password = Password!;
    }
}


internal partial class SettingsViewModel : SettingsViewModelBase
{

    public SettingsViewModel(SettingsService settingsService) : base(settingsService) { }

    // Bind to settings service
    public ObservableCollection<string>? TestNames { get; private set; }

    [ObservableProperty]
    string? username;

    [ObservableProperty]
    string? password;

    [ObservableProperty]
    int number;

    [ObservableProperty]
    Theme theme;
}
