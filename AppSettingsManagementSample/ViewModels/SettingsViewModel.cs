using AppSettingsManagement;
using AppSettingsManagementSample.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.ApplicationModel.Activation;

namespace AppSettingsManagementSample.ViewModels;

// TODO: autogenerate MVVM bindings
/// <summary>
/// Autogenerated
/// </summary>
internal partial class SettingsViewModel
{
    List<SettingChangedEventHandler> settingChangedEventHandlers = new();

    // Initialize view model and register events for updating view model when settings are changed.
    private void InitializeSettings()
    {
        PropertyChanged += SettingsPropertyChanged;

        WeakReference<SettingsViewModel> WeakReference = new(this);

        SettingChangedEventHandler testStringChangedHandler = (sender, e) =>
        {
            if (WeakReference.TryGetTarget(out var target))
                target.TestString = _settingsService.TestString;
        };
        _settingsService.TestStringChanged += testStringChangedHandler;
        settingChangedEventHandlers.Add(testStringChangedHandler);
    }

    protected void RemoveSettingsChagnedHandlers()
    {
        _settingsService.TestStringChanged += settingChangedEventHandlers[0];
    }

    private void SettingsPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        base.OnPropertyChanged(e);

        if (e.PropertyName == nameof(TestString))
            _settingsService.TestString = TestString;
    }
}


internal partial class SettingsViewModel : ObservableObject
{
    [SettingsProvider]
    private readonly SettingsService _settingsService;

    public SettingsViewModel(SettingsService settingsService)
    {
        _settingsService = settingsService;
        InitializeSettings();
    }

    ~SettingsViewModel()
    {
        RemoveSettingsChagnedHandlers();
    }


    // Bind to settings service
    [SettingBinding(Path = nameof(SettingsService.IntList))]
    public ObservableCollection<int> TestList { get; private set; } = null!; // Will be initialized by generated code

    [ObservableProperty]
    [SettingBinding(Path = nameof(SettingsService.TestString))]
    string? testString;

}
