using AppSettingsManagement;
using AppSettingsManagement.Windows;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AppSettingsManagementSample.Services;

/// <summary>
/// Autogenerated
/// </summary>
internal partial class SettingsService
{
    public string? UsernameWithoutDefault // Autogenerate:
    {
        get => GetValue<string?>(nameof(UsernameWithoutDefault));
        set => SetValue<string>(nameof(UsernameWithoutDefault), value, ref UsernameWithoutDefaultChanged);
    }

    public event SettingChangedEventHandler? UsernameWithoutDefaultChanged;


    public int NumberWithoutDefault
    {
        get => GetValue<int>(nameof(NumberWithoutDefault), 10);
        set => SetValue<int>(nameof(NumberWithoutDefault), value, ref NumberWithDefaultChanged);
    }

    public event SettingChangedEventHandler? NumberWithDefaultChanged;


    public int? Number
    {
        get => GetValue<int?>(nameof(Number));
        set => SetValue<int>(nameof(Number), value, ref NumberChanged);
    }

    public event SettingChangedEventHandler? NumberChanged;


    public Theme Theme
    {
        get => GetValue<Theme>(nameof(Theme), Theme.Default);
        set => SetValue<Theme>(nameof(Theme), value, ref ThemeChanged);
    }

    public event SettingChangedEventHandler? ThemeChanged;


    protected override void InitializeContainers()
    {
        ActiveAccount = new(Storage, nameof(ActiveAccount), this);
    }

}

internal partial class SettingsService : SettingsContainer
{
    static readonly ISettingsStorage Provider = new WindowsSettingsStorage();

    public SettingsService() : base(Provider) { }


    // Used to test properties without default
    [SettingItem(nameof(UsernameWithoutDefault))]
    string? usernameWithoutDefault;

    // Used to test properties without default
    [SettingItem(nameof(NumberWithoutDefault))]
    int numberWithoutDefault;

    [SettingItem(nameof(Number), Default = 10)]
    int? number;

    [SettingItem(nameof(Theme), Default = Theme.Default)]
    Theme theme;


    // Composite values

    [SettingsContainer(nameof(ActiveAccount))]
    public AccountInformation ActiveAccount { get; private set; } = null!;


    // TODO: Arrays

}

public enum Theme
{
    Bright,
    Dark,
    Default
}


internal partial class AccountInformation
{
    public string Username
    {
        get => GetValue<string>(nameof(Username), "a");
        set => SetValue<string>(nameof(Username), value, ref UsernameChanged);
    }

    public event SettingChangedEventHandler? UsernameChanged;


    public string Password
    {
        get => GetValue<string>(nameof(Password), "b");
        set => SetValue<string>(nameof(Password), value, ref PasswordChanged);
    }

    public event SettingChangedEventHandler? PasswordChanged;
}

internal partial class AccountInformation : SettingsContainer
{
    public AccountInformation(ISettingsStorage storage, string name, ISettingsContainer parent) : base(storage, name, parent) { }

    [SettingItem(nameof(Username), Default = "a")]
    string username = "";

    [SettingItem(nameof(Password), Default = "b")]
    string password = "";
}