using AppSettingsManagement;
using AppSettingsManagement.Windows;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AppSettingsManagementSample.Services;

// TODO: generate SettingContainer
/// <summary>
/// Autogenerated
/// </summary>
internal partial class SettingsService
{
    public AccountInformation ActiveAccount { get; private set; } = null!;

//    protected override void InitializeContainers()
//    {
//        ActiveAccount = new(Storage, nameof(ActiveAccount), this);
//    }

}

internal partial class SettingsService : SettingsContainer
{
    static readonly ISettingsStorage Provider = new WindowsSettingsStorage();

    #region Settings

    [SettingItem(typeof(string), "UsernameWithoutDefault")] // Used to test properties without default

    [SettingItem(typeof(int), "NumberWithoutDefault")] // Used to test properties without default
    [SettingItem(typeof(int), "Number", Default = 100)]

    [SettingItem(typeof(Theme), "Theme", Default = Theme.Default)]

    [SettingsContainer(typeof(AccountInformation), nameof(ActiveAccount))] // Composite values

    #endregion

    public SettingsService() : base(Provider) { }

    // TODO: Arrays 
}

public enum Theme
{
    Bright,
    Dark,
    Default
}


internal partial class AccountInformation
{

}

internal partial class AccountInformation : SettingsContainer
{
    #region Settings

    [SettingItem(typeof(string), "Username", Default = "a")]
    [SettingItem(typeof(string), "Password", Default = "b")]

    #endregion

    public AccountInformation(ISettingsStorage storage, string name, ISettingsContainer parent) : base(storage, name, parent) { }
}